<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="label1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>